"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBEM = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var defaultConfig = {
  prefixCls: '',
  blockSeparator: '-',
  elementSeparator: '__',
  modifierSeparator: '--',
  modifierValueSeparator: '-'
};

var BEMClassName = function BEMClassName(name, config) {
  var elementSeparator = config.elementSeparator,
      modifierSeparator = config.modifierSeparator,
      modifierValueSeparator = config.modifierValueSeparator;
  return function (element, modifiers) {
    var _modifiers;

    if (element && typeof element !== 'string') {
      modifiers = element;
      element = '';
    }

    var newBlock = element ? name + elementSeparator + element : name;
    var classList = [newBlock];
    (_modifiers = modifiers) === null || _modifiers === void 0 ? void 0 : _modifiers.forEach(function (modifier) {
      var modifierType = (0, _typeof2["default"])(modifier);

      switch (modifierType) {
        case 'string':
          classList.push(modifier);
          break;

        case 'object':
          Object.entries(modifier || {}).forEach(function (_ref) {
            var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
                key = _ref2[0],
                value = _ref2[1];

            if (value === true) {
              classList.push(newBlock + modifierSeparator + key);
            } else if (value) {
              classList.push(newBlock + modifierSeparator + key + modifierValueSeparator + value);
            }
          });
          break;

        default:
          break;
      }
    });
    return classList.join(' ');
  };
};

var createBEM = function createBEM(name, config) {
  config = _objectSpread(_objectSpread({}, defaultConfig), config);
  var _config = config,
      prefixCls = _config.prefixCls,
      blockSeparator = _config.blockSeparator;
  var prefixedName = prefixCls ? prefixCls + blockSeparator + name : name;
  return BEMClassName(prefixedName, config);
};

exports.createBEM = createBEM;